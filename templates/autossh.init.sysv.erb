#!/bin/bash
#
# /etc/rc.d/init.d/autossh-<%= @tun_name %>
#
# Service script for the autossh '<%= @tun_name %>' tunnel
#
# Author:    Aimon Bustardo <me at aimon dot net>
# Date:      24-9-2014
# Version:   1.0.0
# License:   Apache 2.0
#
# This file is bundled with the aimonb-autossh module for puppet, and assumes it
# is being used by that module.
#
# chkconfig: 345 90 10
# description: starts the <%= @tun_name %> autossh
# pidfile: /var/run/autossh-<%= @tun_name %>.pid

# Source lsb library
. /lib/lsb/init-functions

PID_FILE=/var/run/autossh-<%= @tun_name %>
export AUTOSSH_PIDFILE=$PID_FILE
LOCK_FILE=/var/lock/subsys/autossh-<%= @tun_name %>
PROG=autossh

SVC_NAME=autossh-<%= @tun_name %>
SVC_BIN=/usr/bin/autossh
# Load config or exit
. /etc/autossh/autossh-<%= @tun_name %>.conf || (echo 'Config file not found!'; exit 1)
SVC_CONF="${TUNNEL_ARGS} ${BIND}:${PORT}:${FORWARD_HOST}:${HOSTPORT} -p ${REMOTE_SSH_PORT} ${REMOTE_SSH_USER}@${REMOTE_SSH_HOST}"

STARTUP_WAIT=2
SHUTDOWN_WAIT=2

# returns the pid.  if 0 is returned, no pid exists
pid() {
  PID=0
  if [ -f $PID_FILE ]; then read PID < $PID_FILE; fi
  echo $PID
}

locked() {
  if [ -f $LOCK_FILE ]; then echo 1; return; fi
  echo 0;
}

pid_bin() {
  pid_bin=""
  if [ $1 -eq 0 ]; then echo ""; return; fi
  pid_bin=$(ps --pid $1 | grep $1 |  awk '{ print $4 }')
  echo $pid_bin
}

start() {
  PID=$(pid)
  LOCKED=$(locked)
  PID_BIN=$(pid_bin $PID)
 
  if [ $PID -ne 0 ] && [ $LOCKED -eq 1 ] && [ "$PID_BIN" == "$PROG" ]; then
    echo
    exit 0
  elif [ $PID -eq 0 ] && [ $LOCKED -eq 1 ]; then
    rm -f $LOCK_FILE
  elif [ $PID -ne 0 ] && \
       [ $LOCKED -eq 1 ] && \
       [ "$PID_BIN" != "$PROG" ]; then
       # oops, pid files exists, subsys is locked AND we've got the wrong binary
       # running
    # this must mean things went down badly at some point.  we'll clean it up!
    rm -f $PID_FILE $LOCK_FILE
  fi
  runuser - $USER -c "$SVC_BIN $SVC_CONF"
  cmd=`echo "$SVC_BIN $SVC_CONF" | sed 's/-f/ /g' | sed 's/\s/\\\s+/g'`
  pgrep -f "$cmd" > $PID_FILE

  # wait for it to load up
  count=0
  until [ -f $PID_FILE ] || [ "$count" -gt "$STARTUP_WAIT" ]; do
    sleep 1
    let count="${count}+1"
  done
  PID=$(pid)
  PID_BIN=$(pid_bin $PID)
  if [ $PID -gt 0 ] && [ "${PID_BIN}" == "${PROG}" ]; then
    log_success_msg
  else
    log_failure_msg
    exit 1
  fi
}

stop() {
  PID=$(pid)
  LOCKED=$(locked)
  PID_BIN=$(pid_bin $PID)
  
  if [ $PID -ne 0 ] && [ $LOCKED -eq 1 ] && [ "$PID_BIN" == "$PROG" ]; then
    # shutdown the service
    kill -15 $PID
    count=0
    until [ ! -f $PID_FILE ] || [ "$count" -gt "$SHUTDOWN_WAIT" ]; do
      sleep 1
      let count="${count}+1"
    done
    PID=$(pid)
    if [ $PID -ne 0 ]; then kill -9 $PID; fi
    PID=$(pid)
    if [ `ps -p $PID | wc -l` -eq 1 ]; then
      log_success_msg
    else
      log_failure_msg
    fi
  else
    log_failure_msg
  fi

}

status() {
  PID=$(pid)
  LOCKED=$(locked)
  PID_BIN=$(pid_bin $PID)

  if [ $PID -ne 0 ] && [ $LOCKED -eq 1 ] && [ "$PID_BIN" == "$PROG" ]; then
    echo "service ${SVC_NAME} (pid $PID) is running..."
    exit 0
  elif [ $PID -ne 0 ] && [ "$PID_BIN" != "$PROG" ]; then
    # mismatch between pid file and running process
    # that means it died but something else is now running as $PID
    echo "$SVC_NAME dead but pid file exists!"
    exit 1
  elif [ $PID -eq 0 ] && [ $LOCKED -eq 1 ]; then
    echo "$SVC_NAME dead but subsys locked!" 
    exit 2
  fi
  echo "$SVC_NAME is not running..."
  exit 3
}

case "$1" in
  start)
    echo -n "Starting $SVC_NAME service: "
    start
    touch $LOCK_FILE
  ;;
  stop)
    echo -n "Stopping $SVC_NAME service: "
    stop
    rm -f $LOCK_FILE
  ;;
  status)
    status
  ;;
  restart)
    # we want to call the script itself, not the functions
    $0 stop
    $0 start
  ;;
  cond-restart)
     PID=$(pid)
     PID_BIN=$(pid_bin $PID)
     LOCKED=$(locked)
     if [ $PID -ne 0 ] && [ $LOCKED -eq 1 ] && [ "$PID_BIN" == "$PROG" ]; then
       # we want to call this script again from the start, and not just the
       # functions
       $0 stop
       $0 start
     fi 
  ;;
  *)
  echo "Usage: $SVC_NAME {start|stop|status|restart}"
    exit 1
  ;;
esac
